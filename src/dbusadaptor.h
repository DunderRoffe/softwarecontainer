
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__dbusadaptor_h__ADAPTOR_MARSHAL_H
#define __dbusxx__dbusadaptor_h__ADAPTOR_MARSHAL_H

#include <dbus-c++/dbus.h>
#include <cassert>

namespace com {
namespace pelagicore {

class Pelagicontain_adaptor
: public ::DBus::InterfaceAdaptor
{
public:

    Pelagicontain_adaptor()
    : ::DBus::InterfaceAdaptor("com.pelagicore.Pelagicontain")
    {
        register_method(Pelagicontain_adaptor, Echo, _Echo_stub);
        register_method(Pelagicontain_adaptor, Launch, _Launch_stub);
        register_method(Pelagicontain_adaptor, Update, _Update_stub);
        register_method(Pelagicontain_adaptor, Shutdown, _Shutdown_stub);
    }

    ::DBus::IntrospectedInterface *introspect() const 
    {
        static ::DBus::IntrospectedArgument Echo_args[] = 
        {
            { "argument", "s", true },
            { 0, "s", false },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Launch_args[] = 
        {
            { "appId", "s", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Update_args[] = 
        {
            { "config", "as", true },
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedArgument Shutdown_args[] = 
        {
            { 0, 0, 0 }
        };
        static ::DBus::IntrospectedMethod Pelagicontain_adaptor_methods[] = 
        {
            { "Echo", Echo_args },
            { "Launch", Launch_args },
            { "Update", Update_args },
            { "Shutdown", Shutdown_args },
            { 0, 0 }
        };
        static ::DBus::IntrospectedMethod Pelagicontain_adaptor_signals[] = 
        {
            { 0, 0 }
        };
        static ::DBus::IntrospectedProperty Pelagicontain_adaptor_properties[] = 
        {
            { 0, 0, 0, 0 }
        };
        static ::DBus::IntrospectedInterface Pelagicontain_adaptor_interface = 
        {
            "com.pelagicore.Pelagicontain",
            Pelagicontain_adaptor_methods,
            Pelagicontain_adaptor_signals,
            Pelagicontain_adaptor_properties
        };
        return &Pelagicontain_adaptor_interface;
    }

public:

    /* properties exposed by this interface, use
     * property() and property(value) to get and set a particular property
     */

public:

    /* methods exported by this interface,
     * you will have to implement them in your ObjectAdaptor
     */
    virtual std::string Echo(const std::string& argument) = 0;
    virtual void Launch(const std::string& appId) = 0;
    virtual void Update(const std::vector< std::string >& config) = 0;
    virtual void Shutdown() = 0;

public:

    /* signal emitters for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual interface method)
     */
    ::DBus::Message _Echo_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        std::string argout1 = Echo(argin1);
        ::DBus::ReturnMessage reply(call);
        ::DBus::MessageIter wi = reply.writer();
        wi << argout1;
        return reply;
    }
    ::DBus::Message _Launch_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::string argin1; ri >> argin1;
        Launch(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Update_stub(const ::DBus::CallMessage &call)
    {
        ::DBus::MessageIter ri = call.reader();

        std::vector< std::string > argin1; ri >> argin1;
        Update(argin1);
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
    ::DBus::Message _Shutdown_stub(const ::DBus::CallMessage &call)
    {
        Shutdown();
        ::DBus::ReturnMessage reply(call);
        return reply;
    }
};

} } 
#endif //__dbusxx__dbusadaptor_h__ADAPTOR_MARSHAL_H
